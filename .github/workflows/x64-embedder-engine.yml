name: x64-embedder-engine


on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
  release:
    types: [ published, created, edited ]
  repository_dispatch:
  workflow_dispatch:
  schedule:
    # daily
    - cron:  '0 0 * * *'

jobs:
  x86_64-linux-gcc:
    runs-on: [self-hosted, linux]
    
    container:
      image: ghcr.io/meta-flutter/ubuntu-20-dev:main
      options:
        --user 1018
        
    steps:

      - name: Event Information
        run: |
          echo "Event '${{ github.event.action }}' received from '${{ github.event.client_payload.repository }}'"

      - name: Set Ownership
        run: |
          chown -R dev:dev $HOME .
          
      - uses: actions/checkout@v2
      
      - name: Flutter Channel Rolled
        if: github.event.action == 'channel_roll'
        run: |
          TRIPLET=x86_64-linux-gcc
          mkdir -p build/debug && cd build/debug
          echo "Create Debug Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=debug
          echo "ENGINE_VERSION_DEBUG=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.gz -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.deb -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.rpm -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          cd ..
          mkdir release && cd release
          echo "Create Release Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=release
          echo "ENGINE_VERSION_RELEASE=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.gz -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.deb -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.rpm -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          cd ..
          mkdir profile && cd profile
          echo "Create Profile Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=profile
          echo "ENGINE_VERSION_PROFILE=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.gz -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.deb -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt
          PACKAGE_FILE=`find -iname flutter-engine-*-debug-*-Linux-*.rpm -not -path "./_CPack_Packages/*"`
          echo $PACKAGE_FILE
          md5sum $PACKAGE_FILE > ${PACKAGE_FILE}-MD5SUMS.txt

      - name: Build
        run: |
          TRIPLET=x86_64-linux-gcc
          mkdir -p build/debug && cd build/debug
          echo "Create Debug Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=debug
          echo "ENGINE_VERSION_DEBUG=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j
          cd ..
          mkdir release && cd release
          echo "Create Release Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=release
          echo "ENGINE_VERSION_RELEASE=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j
          cd ..
          mkdir profile && cd profile
          echo "Create Profile Packages"
          cmake ../.. \
            -DCMAKE_INSTALL_PREFIX=/usr/local \
            -DTARGET_TRIPLE=${TRIPLET} \
            -DTARGET_ARCH=x64 \
            -DCHANNEL=stable \
            -DENGINE_RUNTIME_MODE=profile
          echo "ENGINE_VERSION_PROFILE=$(cat engine.version | cut -c1-10)" >> $GITHUB_ENV
          make package -j

      - name: Runtime Debug artifacts TGZ
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_DEBUG }}.x86_64-linux-gcc.debug.tgz
          path: |
            build/debug/_packages/*.tar.gz

      - name: Runtime Release artifacts TGZ
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_RELEASE }}.x86_64-linux-gcc.release.tgz
          path: |
            build/release/_packages/*.tar.gz

      - name: Runtime Profile artifacts TGZ
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_PROFILE }}.x86_64-linux-gcc.profile.tgz
          path: |
            build/profile/_packages/*.tar.gz

      - name: Runtime Debug artifacts Debian
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_DEBUG }}.x86_64-linux-gcc.debug.deb
          path: |
            build/debug/_packages/*.deb

      - name: Runtime Release artifacts Debian
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_RELEASE }}.x86_64-linux-gcc.release.deb
          path: |
            build/release/_packages/*.deb

      - name: Runtime Profile artifacts Debian
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_PROFILE }}.x86_64-linux-gcc.profile.deb
          path: |
            build/profile/_packages/*.deb

      - name: Runtime Debug artifacts RPM
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_DEBUG }}.x86_64-linux-gcc.debug.rpm
          path: |
            build/debug/_packages/*.rpm

      - name: Runtime Release artifacts RPM
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_RELEASE }}.x86_64-linux-gcc.release.rpm
          path: |
            build/release/_packages/*.rpm

      - name: Runtime Profile artifacts RPM
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_VERSION_PROFILE }}.x86_64-linux-gcc.profile.rpm
          path: |
            build/profile/_packages/*.rpm
